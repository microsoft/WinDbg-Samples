//**************************************************************************
//
// HelpStrings.rc
//
// Resource file for help strings.
//
//**************************************************************************
//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//**************************************************************************

#include "HelpStrings.h"

STRINGTABLE
BEGIN
    SYMBOLBUILDER_IDS_MODULE_SYMBOLBUILDERSYMBOLS   "The symbol builder symbols for the module"
    SYMBOLBUILDER_IDS_CREATESYMBOLS                 "CreateSymbols(module, [options]) - Creates symbol builder symbols for the module in question.  'module' can be the name or base address of a module or a module object.  'options' is an object with properties which configure the symbols.  'options' currently allows .AutoImportSymbols = true/false (default false).  If 'AutoImportSymbols' is true, symbols from available PDB/exports will be automatically imported to the symbol builder upon use"
    SYMBOLBUILDER_IDS_SYMBOLSET_TYPES               "The list of available types"
    SYMBOLBUILDER_IDS_SYMBOLSET_DATA                "The list of available global data"
    SYMBOLBUILDER_IDS_SYMBOLSET_FUNCTIONS           "The list of available functions"
    SYMBOLBUILDER_IDS_SYMBOLSET_PUBLICS             "The list of available public symbols"
    SYMBOLBUILDER_IDS_TYPES_ADDBASICCTYPES          "AddBasicCTypes() - For symbol builder symbols created without default C types, this adds the default C types to the type system"
    SYMBOLBUILDER_IDS_TYPES_CREATE                  "Create([typeName], [qualifiedTypeName]) - Creates a new user defined type.  An explicit 'qualifiedTypeName' may be optionally provided if different than the base name.  Note that lack of presence of 'typeName' will create an unnamed type which can only be referenced by the value returned from this method"
    SYMBOLBUILDER_IDS_TYPES_CREATEARRAY             "CreateArray(baseType, arraySize) - Creates a new array type.  'baseType' may either be a type object or a type name.  'arraySize' is the size of the array"
    SYMBOLBUILDER_IDS_TYPES_CREATEENUM              "CreateEnum(typeName, [basicType], [qualifiedTypeName]) - Creates a new enum type.  'basicType' is the type of the enum; if unspecified, the default is 'int'.  An explicit 'qualifiedTypeName' may optionally be provided if different than the base name"
    SYMBOLBUILDER_IDS_TYPES_CREATEPOINTER           "CreatePointer(baseType) - Creates a new pointer to the given type"
    SYMBOLBUILDER_IDS_TYPES_CREATETYPEDEF           "CreateTypedef(typeName, baseType, [qualifiedTypeName]) - Creates a new typedef to 'baseType'.  An explicit 'qualifiedTypeName' may optionally be provided if different than the base name"
    SYMBOLBUILDER_IDS_TYPES_FINDBYNAME              "FindByName(typeName, [allowCreation]) - Looks up a type by name and returns it.  If the type is not found, <no value> is returned.  The 'allowCreation' optional argument (default: true) specifies whether types can be created by this method (e.g.: pointers and arrays)"
    SYMBOLBUILDER_IDS_SYMBOL_NAME                   "The name of the symbol"
    SYMBOLBUILDER_IDS_SYMBOL_QUALIFIEDNAME          "The qualified name of the symbol"
    SYMBOLBUILDER_IDS_SYMBOL_PARENT                 "The parent of the symbol"
    SYMBOLBUILDER_IDS_TYPE_SIZE                     "The size of the type as if sizeof(t) had been applied"
    SYMBOLBUILDER_IDS_TYPE_ALIGNMENT                "The alignment of the type as if __alignof(t) had been applied"
    SYMBOLBUILDER_IDS_TYPE_DELETE                   "Delete() - Deletes the type from the symbol builder symbols.  Any live objects of the given type are orphaned"
    SYMBOLBUILDER_IDS_UDTTYPE_BASECLASSES           "The list of base classes of the type"
    SYMBOLBUILDER_IDS_UDTTYPE_FIELDS                "The list of fields of the type"
    SYMBOLBUILDER_IDS_POINTERTYPE_BASETYPE          "The type which the pointer points to"
    SYMBOLBUILDER_IDS_ARRAYTYPE_ARRAYSIZE           "The size of the array"
    SYMBOLBUILDER_IDS_ARRAYTYPE_BASETYPE            "The type which the array is an array of"
    SYMBOLBUILDER_IDS_TYPEDEFTYPE_BASETYPE          "The type which this typedef refers to"
    SYMBOLBUILDER_IDS_ENUMTYPE_BASETYPE             "The basic underlying type of the enum"
    SYMBOLBUILDER_IDS_ENUMTYPE_ENUMERANTS           "The list of enumerants of the enum"
    SYMBOLBUILDER_IDS_FIELDS_ADD                    "Add(name, type, [offset], [details]) - Adds a new field of the given name and type.  'type' may be a type name or type object.  If 'offset' is supplied, the field will be placed at the given offset; otherwise, it will be placed automatically as if defined in a C structure.  'details' is an object which supplies additional information.  It may presently contain 'bitFieldPosition' and 'bitFieldLength'.  Note that 'offset' does not need to be present to supply 'details'"
    SYMBOLBUILDER_IDS_ENUMERANTS_ADD                "Add(name, [value]) - Adds a new enumerant of the given name and value.  If 'value' is supplied, the enumerant has an explicitly assigned value; otherwise, it will be assigned automatically as if defined in a C enum"
    SYMBOLBUILDER_IDS_FIELD_ISAUTOMATICLAYOUT       "Whether or not the field or enumerant has automatically assigned offsets and/or values"
    SYMBOLBUILDER_IDS_FIELD_TYPE                    "The type of the field"
    SYMBOLBUILDER_IDS_FIELD_OFFSET                  "The offset of the field"
    SYMBOLBUILDER_IDS_FIELD_DELETE                  "Delete() - Deletes the field or enumerant from its parent type/enum"
    SYMBOLBUILDER_IDS_FIELD_MOVEBEFORE              "MoveBefore(pos) - Moves this field/enumerant to a location in its parent type before the given field/enumerant.  Note that 'pos' may either be a field/enumerant object or it may be a zero based ordinal indicating its position within the list of fields/enumerants"
    SYMBOLBUILDER_IDS_FIELD_VALUE                   "The value of the field"
    SYMBOLBUILDER_IDS_FIELD_BITFIELDLENGTH          "The length of the bitfield for this field.  If this is zero, the field is not a bitfield"
    SYMBOLBUILDER_IDS_FIELD_BITFIELDPOSITION        "The zero based position of the least significant bit of the bitfield for this field.  The bitfield extends 'BitFieldLength' bits towards the most significant bit"
    SYMBOLBUILDER_IDS_BASECLASSES_ADD               "Add(baseClassType, [offset]) - Adds a new base class of the given type.  If 'offset' is supplied, the base class will be placed at the given offset; otherwise, it will be placed automatically as if defined in a C++ struct/class"
    SYMBOLBUILDER_IDS_BASECLASS_ISAUTOMATICLAYOUT   "Indicates whether the base class has an automatically assigned offset within its parent type"
    SYMBOLBUILDER_IDS_BASECLASS_TYPE                "The type of the base class"
    SYMBOLBUILDER_IDS_BASECLASS_OFFSET              "The offset of the base class within its parent type"
    SYMBOLBUILDER_IDS_BASECLASS_DELETE              "Delete() - Deletes the base class from its parent type"
    SYMBOLBUILDER_IDS_BASECLASS_MOVEBEFORE          "MoveBefore(pos) - Moves this base class to a location in its parent type before the given base class.  Note that 'pos' may either be a base class object or it may be a zero based ordinal indicating its position within the list of base classes"
    SYMBOLBUILDER_IDS_DATA_CREATEGLOBAL             "CreateGlobal(name, type, offset, [qualifiedName]) - Adds new global data of a specified 'type' at 'offset' bytes into the module.  An explicit 'qualifiedName' may optionally be provided if different than the base name"
    SYMBOLBUILDER_IDS_GLOBALDATA_TYPE               "The type of the global data"
    SYMBOLBUILDER_IDS_GLOBALDATA_OFFSET             "The offset of the global data within its loaded module"
    SYMBOLBUILDER_IDS_GLOBALDATA_DELETE             "Delete() - Deletes the global data"
    SYMBOLBUILDER_IDS_FUNCTIONS_CREATE              "Create(name, returnType, codeOffset, codeSize, [qualifiedName], [parameter]...) - Creates a new global function with the specified return type and code range.  Parameters may optionally be specified by the '[parameter]...' arguments.  Each such argument must be an object with a 'Name' and 'Type' property and behaves as if .Parameters.Add were called with said 'Name' and 'Type'"
    SYMBOLBUILDER_IDS_FUNCTION_RETURNTYPE           "The return type of the function"
    SYMBOLBUILDER_IDS_FUNCTION_PARAMETERS           "The list of the parameters of the function"
    SYMBOLBUILDER_IDS_FUNCTION_LOCALVARIABLES       "The list of local variables of the function"
    SYMBOLBUILDER_IDS_FUNCTION_ADDRESSRANGES        "The list of address ranges for code bytes of the function.  The first address range is the primary one and defines the entry point of the function"
    SYMBOLBUILDER_IDS_FUNCTION_DELETE               "Delete() - Deletes the function"
    SYMBOLBUILDER_IDS_PARAMETERS_ADD                "Add(name, parameterType) - Adds a new parameter of the given name and type"
    SYMBOLBUILDER_IDS_PARAMETERS_PROPAGATELIVERANGESFROMCALLINGCONVENTION   "PropagateLiveRangesFromCallingConvention() - Uses knowledge of the function calling convention and a walk of the disassembly to determine the live ranges of each parameter throughout the function"
    SYMBOLBUILDER_IDS_LOCALVARIABLES_ADD            "Add(name, localVariableType) - Adds a new local variable (non parameter) of the given name and type"
    SYMBOLBUILDER_IDS_VARIABLE_NAME                 "The name of the variable (parameter or local)"
    SYMBOLBUILDER_IDS_VARIABLE_TYPE                 "The type of the variable (parameter or local)"
    SYMBOLBUILDER_IDS_VARIABLE_LIVERANGES           "The list of live ranges for the variable (parameter or local)"
    SYMBOLBUILDER_IDS_VARIABLE_DELETE               "Delete() - Deletes the variable (parameter or local)"
    SYMBOLBUILDER_IDS_LIVERANGES_ADD                "Add(rangeOffset, rangeSize, locDesc) - Adds a new live range for the variable within its containing function.  All offsets are function relative"
    SYMBOLBUILDER_IDS_LIVERANGE_OFFSET              "The function relative offset of the start of the live range"
    SYMBOLBUILDER_IDS_LIVERANGE_SIZE                "The size (in code bytes) of the live range"
    SYMBOLBUILDER_IDS_LIVERANGE_LOCATION            "A string description of the location of the variable in this live range"
    SYMBOLBUILDER_IDS_LIVERANGE_DELETE              "Delete() - Deletes the live range"
    SYMBOLBUILDER_IDS_PARAMETER_MOVEBEFORE          "MoveBefore(pos) - Moves this parameter to a location in its parent function before the given parameter.  Note that 'pos' may either be a parameter object or it may be a zero based ordinal indicating its position within the list of parameters"
    SYMBOLBUILDER_IDS_PUBLICS_CREATE                "Create(name, offset) - Adds a new public symbol at 'offset' bytes into the module"
    SYMBOLBUILDER_IDS_PUBLIC_OFFSET                 "The offset of the public symbol into the module"
    SYMBOLBUILDER_IDS_PUBLIC_PROMOTETOFUNCTION      "PromoteToFunction([codeSize], [returnType], [parameter]...) - Converts the public symbol to a function symbol as if Functions.Create had been called.  If the 'codeSize' is specified as zero, the disassembler will be used to find the extent of the function"
    SYMBOLBUILDER_IDS_PUBLIC_DELETE                 "Delete() - Deletes the public symbol"
    SYMBOLBUILDER_IDS_ADDRESSRANGE_START            "The starting address or offset of the address range"
    SYMBOLBUILDER_IDS_ADDRESSRANGE_SIZE             "The size of the address range"
END
